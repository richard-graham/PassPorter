com.example.passporter/
├── data/                           # Data Layer
│   ├── local/
│   │   ├── dao/
│   │   │   ├── AuthDao.kt         # User authentication database access
│   │   │   └── BorderDao.kt       # Border points database access
│   │   ├── database/
│   │   │   ├── AuthDatabase.kt    # Room configuration for auth
│   │   │   └── BorderDatabase.kt  # Room configuration for borders
│   │   └── entity/
│   │       ├── BorderPointEntity.kt
│   │       ├── BorderUpdateEntity.kt
│   │       └── UserEntity.kt      # Local user data model
│   ├── mapper/
│   │   ├── BorderPointMapper.kt
│   │   ├── BorderUpdateMapper.kt
│   │   └── UserMapper.kt          # User data mapping utilities
│   ├── remote/
│   │   ├── api/
│   │   │   ├── AuthService.kt     # Authentication interface
│   │   │   ├── FirebaseAuthService.kt # Firebase auth implementation
│   │   │   └── FirestoreService.kt
│   │   └── model/
│   │       ├── BorderPointDto.kt
│   │       ├── BorderUpdateDto.kt
│   │       └── UserDto.kt         # Remote user data model
│   └── repository/
│       ├── AuthRepositoryImpl.kt   # Auth repository implementation
│       └── BorderRepositoryImpl.kt
├── di/                            # Dependency Injection
│   ├── AppModule.kt
│   ├── DataModule.kt              # DI for auth and border components
│   └── DispatcherProvider.kt
├── domain/                        # Domain Layer
│   ├── entity/
│   │   ├── BorderPoint.kt
│   │   ├── BorderStatus.kt
│   │   ├── BorderUpdate.kt
│   │   └── User.kt               # Domain user model
│   ├── error/
│   │   └── AuthError.kt          # Authentication error types
│   ├── location/
│   │   ├── LocationManager.kt
│   │   └── LocationManagerImpl.kt
│   ├── repository/
│   │   ├── AuthRepository.kt     # Auth repository interface
│   │   └── BorderRepository.kt
│   └── usecase/
│       ├── auth/                 # Authentication use cases
│       │   ├── RegisterWithEmailUseCase.kt
│       │   ├── SignInWithEmailUseCase.kt
│       │   ├── SignInWithFacebookUseCase.kt
│       │   └── SignInWithGoogleUseCase.kt
│       └── border/
│           ├── AddBorderPointUseCase.kt
│           └── GetBorderPointDetailsUseCase.kt
└── presentation/                  # Presentation Layer
    ├── feature/
    │   ├── auth/                 # Authentication UI
    │   │   ├── AuthScreen.kt     # Main authentication screen
    │   │   ├── AuthViewModel.kt  # Authentication state management
    │   │   ├── AuthUiState.kt    # Authentication UI states
    │   │   ├── AuthFormState.kt  # Form validation state
    │   │   ├── model/
    │   │   │   ├── SocialAuthResult.kt # Social auth responses
    │   │   │   └── ValidationResult.kt  # Input validation results
    │   │   └── components/
    │   │       ├── RegisterForm.kt
    │   │       ├── SignInForm.kt
    │   │       └── SocialSignInButton.kt
    │   ├── detail/
    │   │   ├── BorderDetailScreen.kt
    │   │   ├── BorderDetailViewModel.kt
    │   │   └── components/
    │   │       └── DetailContent.kt
    │   └── map/
    │       ├── MapScreen.kt
    │       ├── MapViewModel.kt
    │       └── components/
    │           ├── BorderPointPopup.kt
    │           ├── LocationPermissionRequest.kt
    │           └── MapContent.kt
    ├── navigation/
    │   └── NavGraph.kt
    ├── theme/
    │   ├── Color.kt
    │   ├── Theme.kt
    │   └── Type.kt
    └── util/
        └── ResultUtil.kt

## Application Components

### Application Setup
- PassporterApplication: Hilt-enabled application class
  - Google Play Services verification
  - Maps initialization
  - Firebase setup and authentication
  - StrictMode configuration in debug
  - Memory management

### Main Activity
- Jetpack Compose based
- Edge-to-edge display support
- Authentication state management
- Navigation based on auth state
- Google Sign-In setup
- Theme implementation

## Authentication System

### Data Layer

#### Local Storage
- Room database for user data persistence
- AuthDao for user CRUD operations
- UserEntity for local user data representation
- Local caching of user credentials

#### Remote Integration
- Firebase Authentication service
- Firestore for user profile data
- Support for email/password, Google, and Facebook authentication
- Token-based authentication
- Error handling and mapping

#### Repository Pattern
- AuthRepository interface defining authentication operations
- AuthRepositoryImpl handling data synchronization between local and remote
- Coroutine-based asynchronous operations

### Domain Layer

#### Entity Models
- User: Domain model for authenticated users
- AuthError: Sealed class for authentication error handling
- Validation models for form inputs

#### Use Cases
- RegisterWithEmailUseCase: New user registration with validation
- SignInWithEmailUseCase: Email authentication
- SignInWithGoogleUseCase: Google OAuth integration
- SignInWithFacebookUseCase: Facebook authentication
- Input validation and error handling

### Presentation Layer

#### Authentication UI Components
- AuthScreen: Main authentication interface
  - Social sign-in integration
  - Form-based authentication
  - Error handling and loading states
  - Animated form transitions
- RegisterForm: User registration interface
  - Input validation
  - Language selection
  - Error feedback
- SignInForm: Login interface
  - Credential validation
  - Password visibility toggle
  - Error state handling
- SocialSignInButton: Reusable social auth component
  - Loading state management
  - Platform-specific authentication

#### State Management
- AuthViewModel: Authentication logic and state
  - Form state management
  - Social auth integration
  - Error handling
  - Navigation control
- AuthUiState: UI state representation
  - Loading, Success, Error states
  - Error type classification
- AuthFormState: Form input management
  - Field validation
  - Error messages
  - Mode switching
- Validation: Input validation logic
  - Email format checking
  - Password strength validation
  - Phone number formatting

#### Features
- Email/password authentication
- Social authentication (Google, Facebook)
- User registration
- Form validation
- Error handling
- Loading state management
- Persistent authentication
- Deep linking support

## Border Management System

### Map Feature

#### MapScreen
Components:
- GoogleMap integration
- Location permission handling
- Border point markers
- Bottom sheet details popup

States:
- Loading
- LocationPermissionRequired
- Error
- Success (with border points, location, selection)

#### MapViewModel
Responsibilities:
- Border point management
- Location tracking
- Camera position handling
- Bounds-based updates
- Permission management

### Detail Feature

#### BorderDetailScreen
Components:
- Detailed border point information
- Map preview
- Facility information
- Operating hours
- Traffic types

States:
- Loading
- Error
- Success (with border point data)

### UI Components

#### Common Components
- BorderPointPopup: Bottom sheet for selected points
- LocationPermissionRequest: Permission UI
- DetailContent: Border point details layout
- MapContent: Main map interface

#### Theme
- Material3 implementation
- Dynamic color support
- Custom typography
- Light/dark theme support

## Technical Implementation

### Architecture Pattern
- MVVM with Clean Architecture
- Compose for UI
- ViewModel for state management
- Kotlin Flow for reactive updates

### Authentication Implementation
- Firebase Authentication integration
- Local data persistence with Room
- Coroutines for asynchronous operations
- Social authentication providers
- Form validation and error handling
- Token management
- Secure credential storage

### Maps Integration
- Google Maps Compose implementation
- Custom markers
- Camera position management
- Bounds tracking

### State Management
- ViewModel-based state holders
- Kotlin Flow for reactive updates
- Result wrapper for error handling
- Form state validation
- Loading state handling
- Error type classification

### Navigation
- Compose Navigation
- Authentication-aware routing
- Deep linking support
- Screen state preservation
- Type-safe navigation arguments